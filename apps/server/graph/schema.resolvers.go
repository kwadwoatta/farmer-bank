package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"os"

	"github.com/kwadwoatta/farmer-bank-web/server/graph/model"
)

// CreateBank is the resolver for the createBank field.
func (r *mutationResolver) CreateBank(ctx context.Context, input model.NewBank) ([]*model.Bank, error) {
	type Banks struct {
		Banks []model.Bank `json:"banks"`
	}

	jsonFile, err := os.Open("data.json")

	if err != nil {
		log.Fatal("Can't open seed file")
	}

	defer jsonFile.Close()

	byteValue, _ := io.ReadAll(jsonFile)

	var banks Banks

	err = json.Unmarshal(byteValue, &banks)

	if err != nil {
		log.Fatal("Error while trying to unmarshal seed file")
	}

	for _, bank := range banks.Banks {

		r.banks = append(r.banks, &bank)
	}

	prettyBank, err := json.MarshalIndent(r.banks, "", "  ")
	if err != nil {
		log.Fatal("error:", err)
	}

	fmt.Print(string(prettyBank))

	return r.banks, nil
}

// Banks is the resolver for the banks field.
func (r *queryResolver) Banks(ctx context.Context) ([]*model.Bank, error) {
	return r.banks, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
